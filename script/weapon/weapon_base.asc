#include "../entity.asc"

bool g_weapon_base_equip              = false,
     g_weapon_base_semiFlag           = false,
	 g_weapon_base_isAuto             = false,
	 g_weapon_base_reloading          = false,
	 g_weapon_base_moveAnim  		  = false,
	 g_weapon_base_firemode_swap_flag = false;

int g_weapon_base_currentTime         = 0,
    g_weapon_base_lastReloadTime      = 0,
    g_weapon_base_lastFireTime        = 0;
    
int g_weapon_base_currentAmmo         = 0,
	g_weapon_base_maxAmmo             = 0,
	g_weapon_base_firerate_ms         = 0,
	g_weapon_base_reload_timeout_ms   = 0,
	g_weapon_base_damage              = 1;

float g_weapon_base_range             = 1000.0;

void weapon_base_init(entityid self)
{
	render::visible(self, false);
    entity::setParentCamera(self);
}

void weapon_base_equip(entityid self)
{
	if (!g_weapon_base_equip)
    {
		render::visible(self, true);
		
        animation::play(self, "equip");
		
		sound::play(self, "equip");
		
		g_weapon_base_currentAmmo = string::to_int(player::getEquippedItemData("ammo"));
		
        g_weapon_base_equip = true;
    }
}

void weapon_base_update(entityid self)
{
	g_weapon_base_currentTime = time::get();

	if (animation::ended(self))
	{
		if (player::isMoving()) 
		{
			animation::play(self, "move");
		} 
		else
		{
			animation::play(self, "idle");
		}
	} 
	
	if (animation::last(self) == "idle" && player::isMoving()) 
	{
		animation::play(self, "move");
	}
	
	if (animation::last(self) == "move" && !player::isMoving()) 
	{
		animation::play(self, "idle");
	}
	
	if (animation::ended(self))
	{
		animation::play(self, "idle");
	}
}

void weapon_base_allow_firemode_swap()
{
	if (input.onActionPress("firemode") && !g_weapon_base_firemode_swap_flag) 
    {
		g_weapon_base_isAuto = !g_weapon_base_isAuto;
	
		g_weapon_base_firemode_swap_flag = true;
	}
	
	if (!input.onActionPress("firemode"))
	{
		g_weapon_base_firemode_swap_flag = false;
	}
}

void weapon_base_fire_raycast_basic(entityid self, bool consume_ammo = true)
{	
	if (input.onActionPress("primary")  
		&& g_weapon_base_currentTime - g_weapon_base_lastFireTime > g_weapon_base_firerate_ms
		&& g_weapon_base_currentAmmo > 0
		&& !g_weapon_base_semiFlag   
		&& !g_weapon_base_reloading)
	{
		animation::play(self, "fire");
		
		sound::play(self, "fire");
			  
		if (raycast::camera())
		{
			if (raycast::length() < g_weapon_base_range) 
			{
				game::damage(raycast::id(), g_weapon_base_damage);
				entity::spawn("debug/hitmarker", raycast::position(), vector3d(0, 0, 0), vector3d(0.1, 0.1, 0.1));
			}
		}
					
		g_weapon_base_lastFireTime = g_weapon_base_currentTime;
		g_weapon_base_semiFlag = true;

		if (consume_ammo)
		{
			g_weapon_base_currentAmmo--;
		}
					
		player::setEquippedItemData("ammo", string::to_string(g_weapon_base_currentAmmo));	
	}
	
	if (!input.onActionPress("primary") || g_weapon_base_isAuto)
    {
        g_weapon_base_semiFlag = false;
    }
}

void weapon_base_reload_basic(entityid self)
{
    if (input.onActionPress("reload") && g_weapon_base_currentTime - g_weapon_base_lastReloadTime > g_weapon_base_reload_timeout_ms) 
    {
		g_weapon_base_reloading = true;
	
		if (g_weapon_base_currentAmmo > 0) 
		{
			animation::play(self, "reload");
			
			sound::play(self, "reload");
		} 
		else 
		{
			animation::play(self, "reload_empty");
			
			sound::play(self, "reload_empty");
		}
			
		g_weapon_base_currentAmmo = g_weapon_base_maxAmmo;
			
		player::setEquippedItemData("ammo", string::to_string(g_weapon_base_currentAmmo));
			
		g_weapon_base_lastReloadTime = g_weapon_base_currentTime;
    }
	
	if (g_weapon_base_currentTime - g_weapon_base_lastReloadTime > g_weapon_base_reload_timeout_ms)
	{
		g_weapon_base_reloading = false;
	}
}