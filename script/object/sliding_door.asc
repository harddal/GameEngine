#include "../entity.asc"

[export]
bool g_slideX = false;
[export]
bool g_slideY = true;
[export]
bool g_slideZ = false;

[export]
bool g_startOpened = false;

bool g_opened   = false,
	 g_activate = false,
	 g_moving   = false;

vector3d initialPosition;

void init(entityid self)
{
	if (g_startOpened)
	{
		initialPosition = vector3d(
			transform::position(self).x - render::getBoundingBox(self).x,
			transform::position(self).y - render::getBoundingBox(self).y,
			transform::position(self).z - render::getBoundingBox(self).z);
			
		g_opened = true;
	}
	else
	{
		initialPosition = transform::position(self);
	}
	
	if (g_slideX && g_slideY)
	{
		g_slideY = false;
	}
	if (g_slideY && g_slideZ)
	{
		g_slideZ = false;
	}
	if (g_slideX && g_slideZ)
	{
		g_slideX = false;
	}
	if (g_slideX && g_slideY && g_slideZ)
	{
		g_slideX = false;
		g_slideZ = false;
	}
	if (!g_slideX && !g_slideY && !g_slideZ)
	{
		g_slideY = true;
	}
}

void update(entityid self)
{
	if (g_activate)
	{	
		g_moving = true;
		g_activate = false;
		
		if (!g_opened)
		{
			sound::play(self, "open");
		}
		else
		{
			sound::play(self, "close");
		}
	}

    if (g_moving) 
	{
		if (g_slideX)
		{
			if (!g_opened)
			{
				physx::setKinematicPosition(self, transform::position(self) + vector3d(0.1, 0, 0));
				
				if (transform::position(self).x > (initialPosition.x + render::getBoundingBox(self).x) + 0.1)
				{
					g_moving = false;
					g_opened = true;
					
					game::activateLogicEvent(self, true);
				}
			}
			else
			{
				physx::setKinematicPosition(self, transform::position(self) + vector3d(-0.1, 0, 0));
			
				if (transform::position(self).x < initialPosition.x + 0.1)
				{
					g_moving = false;
					g_opened = false;
					game::activateLogicEvent(self, true);
				}
			}
		}
		
		if (g_slideY)
		{
		    if (!g_opened)
			{
				physx::setKinematicPosition(self, transform::position(self) + vector3d(0, 0.1, 0));
			
				if (transform::position(self).y > (initialPosition.y + render::getBoundingBox(self).y) + 0.1)
				{
					g_moving = false;
					g_opened = true;
					game::activateLogicEvent(self, true);
				}
			}
			else
			{
				physx::setKinematicPosition(self, transform::position(self) + vector3d(0, -0.1, 0));
			
				if (transform::position(self).y < initialPosition.y + 0.1)
				{
					g_moving = false;
					g_opened = false;
					game::activateLogicEvent(self, true);
				}
			}
		}
		
		if (g_slideZ)
		{
		    if (!g_opened)
			{
				physx::setKinematicPosition(self, transform::position(self) + vector3d(0, 0, 0.1));
				
				if (transform::position(self).z > (initialPosition.z + render::getBoundingBox(self).z) + 0.01)
				{
					g_moving = false;
					g_opened = true;
					game::activateLogicEvent(self, true);
				}
			}
			else
			{
				physx::setKinematicPosition(self, transform::position(self) + vector3d(0, 0, -0.1));
				
				if (transform::position(self).z < initialPosition.z + 0.01)
				{
					g_moving = false;
					g_opened = false;
					game::activateLogicEvent(self, true);
				}
			}
		}
	}
}

void onLogicEvent(entityid self)
{
	g_activate = true;
}
